// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformerBase Base performer, returned in search results
// swagger:model PerformerBase
type PerformerBase struct {

	// Whether it's an animal performer
	AnimalPerformer bool `json:"animalPerformer,omitempty"`

	// Performer birth name
	BirthName string `json:"birthName,omitempty"`

	// Date the performer was born
	// Format: date
	DateOfBirth strfmt.Date `json:"dateOfBirth,omitempty"`

	// Date the performer died
	// Format: date
	DateOfDeath strfmt.Date `json:"dateOfDeath,omitempty"`

	// Whether it's a performer that appeared in Star Trek: Discovery
	DisPerformer bool `json:"disPerformer,omitempty"`

	// Whether it's a performer that appeared in Star Trek: Deep Space Nine
	Ds9Performer bool `json:"ds9Performer,omitempty"`

	// Whether it's a performer that appeared in Star Trek: Enterprise
	EntPerformer bool `json:"entPerformer,omitempty"`

	// Whether it's a performer that appeared in a Star Trek movie
	FilmPerformer bool `json:"filmPerformer,omitempty"`

	// Performer gender
	Gender Gender `json:"gender,omitempty"`

	// Performer name
	Name string `json:"name,omitempty"`

	// Place the performer was born
	PlaceOfBirth string `json:"placeOfBirth,omitempty"`

	// Place the performer died
	PlaceOfDeath string `json:"placeOfDeath,omitempty"`

	// Whether it's a stand-in performer
	StandInPerformer bool `json:"standInPerformer,omitempty"`

	// Whether it's a stunt performer
	StuntPerformer bool `json:"stuntPerformer,omitempty"`

	// Whether it's a performer that appeared in Star Trek: The Animated Series
	TasPerformer bool `json:"tasPerformer,omitempty"`

	// Whether it's a performer that appeared in Star Trek: The Next Generation
	TngPerformer bool `json:"tngPerformer,omitempty"`

	// Whether it's a performer that appeared in Star Trek: The Original Series
	TosPerformer bool `json:"tosPerformer,omitempty"`

	// Performer unique ID
	UID string `json:"uid,omitempty"`

	// Whether it's a video game performer
	VideoGamePerformer bool `json:"videoGamePerformer,omitempty"`

	// Whether it's a voice performer
	VoicePerformer bool `json:"voicePerformer,omitempty"`

	// Whether it's a performer that appeared in Star Trek: Voyager
	VoyPerformer bool `json:"voyPerformer,omitempty"`
}

// Validate validates this performer base
func (m *PerformerBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfDeath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformerBase) validateDateOfBirth(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfBirth) { // not required
		return nil
	}

	if err := validate.FormatOf("dateOfBirth", "body", "date", m.DateOfBirth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PerformerBase) validateDateOfDeath(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfDeath) { // not required
		return nil
	}

	if err := validate.FormatOf("dateOfDeath", "body", "date", m.DateOfDeath.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PerformerBase) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	if err := m.Gender.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gender")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformerBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformerBase) UnmarshalBinary(b []byte) error {
	var res PerformerBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
