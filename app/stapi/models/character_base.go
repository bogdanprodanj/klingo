// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CharacterBase Base character, returned in search results
// swagger:model CharacterBase
type CharacterBase struct {

	// Whether this character is from alternate reality
	AlternateReality bool `json:"alternateReality,omitempty"`

	// Blood type
	BloodType BloodType `json:"bloodType,omitempty"`

	// Day the character was born
	DayOfBirth int64 `json:"dayOfBirth,omitempty"`

	// Day the character died
	DayOfDeath int64 `json:"dayOfDeath,omitempty"`

	// Whether this character is deceased
	Deceased bool `json:"deceased,omitempty"`

	// Whether this character is a fictional character (from universe point of view)
	FictionalCharacter bool `json:"fictionalCharacter,omitempty"`

	// Character gender
	Gender Gender `json:"gender,omitempty"`

	// Height in centimeters
	Height int64 `json:"height,omitempty"`

	// Whether this character is a hologram
	Hologram bool `json:"hologram,omitempty"`

	// Hologram activation date
	HologramActivationDate string `json:"hologramActivationDate,omitempty"`

	// Hologram date status
	HologramDateStatus string `json:"hologramDateStatus,omitempty"`

	// Hologram status
	HologramStatus string `json:"hologramStatus,omitempty"`

	// Marital status
	MaritalStatus MaritalStatus `json:"maritalStatus,omitempty"`

	// Whether this character is from mirror universe
	Mirror bool `json:"mirror,omitempty"`

	// Month the character was born
	MonthOfBirth int64 `json:"monthOfBirth,omitempty"`

	// Month the character died
	MonthOfDeath int64 `json:"monthOfDeath,omitempty"`

	// Character name
	Name string `json:"name,omitempty"`

	// Place of birth
	PlaceOfBirth string `json:"placeOfBirth,omitempty"`

	// Place of death
	PlaceOfDeath string `json:"placeOfDeath,omitempty"`

	// Serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// Character unique ID
	UID string `json:"uid,omitempty"`

	// Weight in kilograms
	Weight int64 `json:"weight,omitempty"`

	// Year the character was born
	YearOfBirth int64 `json:"yearOfBirth,omitempty"`

	// Year the character died
	YearOfDeath int64 `json:"yearOfDeath,omitempty"`
}

// Validate validates this character base
func (m *CharacterBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBloodType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaritalStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CharacterBase) validateBloodType(formats strfmt.Registry) error {

	if swag.IsZero(m.BloodType) { // not required
		return nil
	}

	if err := m.BloodType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bloodType")
		}
		return err
	}

	return nil
}

func (m *CharacterBase) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	if err := m.Gender.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gender")
		}
		return err
	}

	return nil
}

func (m *CharacterBase) validateMaritalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MaritalStatus) { // not required
		return nil
	}

	if err := m.MaritalStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("maritalStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CharacterBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CharacterBase) UnmarshalBinary(b []byte) error {
	var res CharacterBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
