// Code generated by go-swagger; DO NOT EDIT.

package character

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCharacterParams creates a new GetCharacterParams object
// with the default values initialized.
func NewGetCharacterParams() *GetCharacterParams {
	var ()
	return &GetCharacterParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCharacterParamsWithTimeout creates a new GetCharacterParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCharacterParamsWithTimeout(timeout time.Duration) *GetCharacterParams {
	var ()
	return &GetCharacterParams{

		timeout: timeout,
	}
}

// NewGetCharacterParamsWithContext creates a new GetCharacterParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCharacterParamsWithContext(ctx context.Context) *GetCharacterParams {
	var ()
	return &GetCharacterParams{

		Context: ctx,
	}
}

// NewGetCharacterParamsWithHTTPClient creates a new GetCharacterParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCharacterParamsWithHTTPClient(client *http.Client) *GetCharacterParams {
	var ()
	return &GetCharacterParams{
		HTTPClient: client,
	}
}

/*GetCharacterParams contains all the parameters to send to the API endpoint
for the get character operation typically these are written to a http.Request
*/
type GetCharacterParams struct {

	/*APIKey
	  API key

	*/
	APIKey *string
	/*UID
	  Character unique ID

	*/
	UID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get character params
func (o *GetCharacterParams) WithTimeout(timeout time.Duration) *GetCharacterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get character params
func (o *GetCharacterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get character params
func (o *GetCharacterParams) WithContext(ctx context.Context) *GetCharacterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get character params
func (o *GetCharacterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get character params
func (o *GetCharacterParams) WithHTTPClient(client *http.Client) *GetCharacterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get character params
func (o *GetCharacterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIKey adds the aPIKey to the get character params
func (o *GetCharacterParams) WithAPIKey(aPIKey *string) *GetCharacterParams {
	o.SetAPIKey(aPIKey)
	return o
}

// SetAPIKey adds the apiKey to the get character params
func (o *GetCharacterParams) SetAPIKey(aPIKey *string) {
	o.APIKey = aPIKey
}

// WithUID adds the uid to the get character params
func (o *GetCharacterParams) WithUID(uid string) *GetCharacterParams {
	o.SetUID(uid)
	return o
}

// SetUID adds the uid to the get character params
func (o *GetCharacterParams) SetUID(uid string) {
	o.UID = uid
}

// WriteToRequest writes these params to a swagger request
func (o *GetCharacterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIKey != nil {

		// query param apiKey
		var qrAPIKey string
		if o.APIKey != nil {
			qrAPIKey = *o.APIKey
		}
		qAPIKey := qrAPIKey
		if qAPIKey != "" {
			if err := r.SetQueryParam("apiKey", qAPIKey); err != nil {
				return err
			}
		}

	}

	// query param uid
	qrUID := o.UID
	qUID := qrUID
	if qUID != "" {
		if err := r.SetQueryParam("uid", qUID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
